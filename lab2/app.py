# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dMkDkWOUqkrdERtYi33TVEQHFeJv4hKE
"""

from flask import Flask, render_template, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from wtforms.validators import InputRequired, Email
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired
#retard zone++++++++++
from flask import session






#retard zone++++++++++
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'

db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)  # make sure this line is present
    password = db.Column(db.String(60), nullable=False)


class LoginForm(FlaskForm):
   name = StringField("Name", validators=[InputRequired("Please enter your name.")])
   password = PasswordField("Password", validators=[InputRequired("Please enter your password.")])


class RegisterForm(FlaskForm):
    name = StringField('Name', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Sign Up')




def create_tables():
    with app.app_context():
        db.create_all()

create_tables()

@app.route('/')
def home():
    return render_template('home.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(name=form.name.data).first()
        if user:
            if user.password == form.password.data:
                session['username'] = form.name.data  # Store username in session
                return redirect(url_for('hello'))
    return render_template('login.html', form=form)





@app.route('/register', methods=['GET', 'POST'])
def register():
  form = RegisterForm()
  if form.validate_on_submit():
      user = User.query.filter_by(name=form.name.data).first()
      if user:
          return "Name already exists"
      else:
          new_user = User(name=form.name.data, password=form.password.data)
          db.session.add(new_user)
          db.session.commit()
          return redirect(url_for('home'))
  return render_template('register.html', form=form)


@app.route('/hello', methods=['GET', 'POST'])
def hello():
    if 'username' not in session:
        return redirect(url_for('login'))

    username = session['username']

    conn = sqlite3.connect('my_database.db')

    # Get user's rated books from the database
    user_ratings=pd.read_sql_query(f"SELECT * FROM ratings WHERE username='{username}'",conn)

    # If POST request (user is rating a book), add rating to database
    if request.method == 'POST':
        data = request.get_json()
        unique_id = data['unique_id']
        rating = float(data['rating'])

        cursor=conn.cursor()

        cursor.execute(f"INSERT INTO ratings (username, unique_id,rating) VALUES ('{session['username']}', '{unique_id}', {rating})")

        conn.commit()

   # Get recommendation for the user
   model_path=f'models/{username}_model.h5'

   if os.path.exists(model_path):
       loaded_model=load_model(model_path)

       X_all_books=df_processed.drop(columns=['title', 'unique_id']).values.astype(float)
       predictions=loaded_model.predict(X_all_books)

       recommended_book_index=np.argmax(predictions)

       recommended_book_title=df.iloc[recommended_book_index]['title']

   else:
       recommended_book_title="No recommendation available. Please rate more books."

   return render_template('hello.html', rated_books=user_ratings, recommended_book=recommended_book_title)


@app.route('/rate_book', methods=['POST'])
def rate_book():
    if 'username' not in session:
        return jsonify({"message": "Please log in first."})

    data = request.get_json()

    unique_id = data['unique_id']
    rating = float(data['rating'])

    conn = sqlite3.connect('my_database.db')

    cursor=conn.cursor()

    cursor.execute(f"INSERT INTO ratings (username, unique_id,rating) VALUES ('{session['username']}', '{unique_id}', {rating})")

    conn.commit()

   return jsonify({"message": "Rating saved."})


@app.route('/logout')
def logout():
    if 'username' in session:
        session.pop('username')  # Clear username from session
    return redirect(url_for('home'))



if __name__ == '__main__':
  app.run(debug=True)